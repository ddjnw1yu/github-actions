# This is a basic workflow to help you get started with Actions

name: Check Step Outcome

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  check-step:
    if: always()
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    outputs:
      outcome: ${{ steps.step.outcome }}
      
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - name: Mock step outcome
        id: step
        run: |
          echo "this is step 1"
          # exit 1
        
      - name: Get mock step outcome
        run: echo "${{ steps.step.outcome }}"
          
  check-workflow:
    if: always()
    runs-on: ubuntu-latest
    needs: check-step
    outputs:
      status: ${{ env.TESTING }}
      
    steps:
      - name: Step result
        run: echo "C_STEP=${{ needs.check-step.outputs.outcome }}" >> $GITHUB_ENV
          
      - name: Get previous workflow status
        uses: Mercymeilya/last-workflow-status@v0.3.3
        id: workflow
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}

      - name: Workflow result
        run: echo "P_WORKFLOW=${{ steps.workflow.outputs.last_status }}" >> $GITHUB_ENV

      - name: Check
        run: |
          if [[ $C_STEP == 'success' && $P_WORKFLOW == 'success' ]]; then
            echo "TESTING=keepsuccess" >> $GITHUB_ENV
          elif [[ $C_STEP == 'success' && $P_WORKFLOW == 'failure' ]]; then
            echo "TESTING=backtonormal" >> $GITHUB_ENV
          elif [[ $C_STEP == 'failure' && $P_WORKFLOW == 'success' ]]; then
            echo "TESTING=failure" >> $GITHUB_ENV
          elif [[ $C_STEP == 'failure' && $P_WORKFLOW == 'failure' ]]; then
            echo "TESTING=keepfailure" >> $GITHUB_ENV
          else
            echo "Unexpected condition. Investigation is required."
          fi
          
      - name: Get testing status
        run: echo "$TESTING"
          
      - name: Force fail
        if: env.TESTING == 'failure' || env.TESTING == 'keepfailure'
        run: exit 1

  notify:
    if: always()
    runs-on: ubuntu-latest
    needs: check-workflow
    
    steps:
      - name: Send notification to Slack
        run: |
          echo "Testing status=${{ needs.check-workflow.outputs.status }}"
          echo "Sending notification to Slack..."
